{"version":3,"sources":["App.js","index.js","App.module.css"],"names":["History","props","history","map","el","onClick","console","log","turn","setGameState","gameState","setTurn","App","useState","setHistory","isOver","setIsOver","winningState","setWinningState","useEffect","Math","abs","endGame","style","state","includes","Field","shapeType","setShapeType","getShapeId","onFieldClick","position","shape","chooseShape","newGameState","getCellValueFromGameState","numericValue","getValueFromNumericValue","cellArray","i","push","winningCell","className","s","wrapper","Cell","classes","cell","leftDiagonalCrossing","rightDiagonalCrossing","horizontalCrossing","verticalCrossing","cellValue","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.83050a7f.chunk.js","sourcesContent":["import s from './App.module.css'\nimport {useEffect, useState} from \"react\";\n\nlet History = (props) => {\n    let arr = props.history.map(el => <div onClick={() => {\n        console.log(el.turn)\n        props.setGameState(el.gameState)\n        props.setTurn(el.turn)\n    }}> {el.turn} </div>)\n    return arr\n}\n\nlet App = () => {\n    let [turn, setTurn] = useState(0)\n    let [history, setHistory] = useState([{turn: 0, gameState: [0, 0, 0, 0, 0, 0, 0, 0]}])\n    let [gameState, setGameState] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0])\n    let [isOver, setIsOver] = useState(false)\n    let [winningState, setWinningState] = useState({})\n\n\n    useEffect(() => {\n            if (Math.abs(gameState[0] + gameState[1] + gameState[2]) === 3) {\n                endGame({style: \"horizontal\", state: [0, 1, 2]})\n            } else if (Math.abs(gameState[3] + gameState[4] + gameState[5]) === 3) {\n                endGame({style: \"horizontal\", state: [3, 4, 5]})\n            } else if (Math.abs(gameState[6] + gameState[7] + gameState[8]) === 3) {\n                endGame({style: \"horizontal\", state: [6, 7, 8]})\n            } else if (Math.abs(gameState[0] + gameState[4] + gameState[8]) === 3) {\n                endGame({style: \"left-diagonal\", state: [0, 4, 8]})\n            } else if (Math.abs(gameState[2] + gameState[4] + gameState[6]) === 3) {\n                endGame({style: \"right-diagonal\", state: [2, 4, 6]})\n            } else if (Math.abs(gameState[0] + gameState[3] + gameState[6]) === 3) {\n                endGame({style: \"vertical\", state: [0, 3, 6]})\n            } else if (Math.abs(gameState[1] + gameState[4] + gameState[7]) === 3) {\n                endGame({style: \"vertical\", state: [1, 4, 7]})\n            } else if (Math.abs(gameState[2] + gameState[5] + gameState[8]) === 3) {\n                endGame({style: \"vertical\", state: [2, 5, 8]})\n            } else if (!gameState.includes(0)) {\n                endGame({style: \"no-moves\", state: gameState})\n            }\n\n        }, [gameState]\n    )\n\n\n    let endGame = (winningState) => {\n        setWinningState(winningState)\n        setIsOver(true)\n        console.log(\"game over\")\n    }\n\n    return (\n        <div>\n            <Field winningState={winningState} isOver={isOver} history={history} gameState={gameState}\n                   setHistory={setHistory} turn={turn} setTurn={setTurn} setGameState={setGameState}/>\n            <History setGameState={setGameState} history={history} setTurn={setTurn}/>\n            {isOver ? <div> Game is over </div> : null}\n        </div>\n    )\n}\nexport default App\nlet Field = ({winningState, turn, isOver, setHistory, gameState, history, setTurn, setGameState}) => {\n    console.log(history)\n    let [shapeType, setShapeType] = useState(\"\")\n    let chooseShape = (turn) => {\n        if (turn % 2 !== 0) {\n            return \"O\"\n        } else return \"X\"\n    }\n    let getShapeId = (turn) => {\n        if (turn % 2  !== 0 ) return 1\n        else return -1\n    }\n    let onFieldClick = (turn, position, shape) => {\n        setShapeType(chooseShape(turn))\n        setTurn((turn) => turn + 1)\n        let newGameState = [...gameState]\n        newGameState[position] = getShapeId(turn)\n        setGameState(newGameState)\n        console.log(newGameState, shape)\n        setHistory([...history, {turn: turn, gameState: newGameState}])\n    }\n\n    let getCellValueFromGameState = (position) => {\n        let getValueFromNumericValue = (numericValue) => {\n            if (numericValue === 1) return \"X\"\n            else if (numericValue === -1) return \"0\"\n            else return \"\"\n\n        }\n        let numericValue = gameState[position]\n        let value = getValueFromNumericValue(numericValue)\n        return value;\n    }\n    let cellArray = []\n    for (let i = 0; i < 9; i++) {\n        cellArray.push(<Cell winningCell={winningState?.state?.includes(i) ? winningState : null} isOver={isOver}\n                             position={i} shapeType={shapeType}\n                             onFieldClick={onFieldClick}\n                             turn={turn}\n                             setHistory={setHistory}\n                             gameState={gameState}\n                             history={history}\n                             getShapeId={getShapeId}\n                             getCellValueFromGameState={getCellValueFromGameState}\n            />\n        )\n    }\n    return <>\n        <div className={s.wrapper}>\n            {cellArray}\n        </div>\n    </>\n}\nlet Cell = ({\n                winningCell,\n                shapeType,\n                onFieldClick,\n                turn,\n                position,\n                isOver,\n                getCellValueFromGameState\n            }) => {\n    let [cellValue, setCellValue] = useState(\"\")\n    let classes = s.cell\n\n    if (winningCell && winningCell.style === \"left-diagonal\") {\n        classes = classes + \" \" + s.leftDiagonalCrossing\n    } else if (winningCell && winningCell.style === \"right-diagonal\") {\n        classes = classes + \" \" + s.rightDiagonalCrossing\n\n    } else if (winningCell && winningCell.style === \"horizontal\") {\n        classes = classes + \" \" + s.horizontalCrossing\n\n    } else if (winningCell && winningCell.style === \"vertical\") {\n        classes = classes + \" \" + s.verticalCrossing\n\n    }\n    let onCellClick = () => {\n        if (!isOver && !getCellValueFromGameState(position)) {\n            onFieldClick(turn + 1, position, shapeType)\n        }\n    }\n    return <div className={classes} onClick={onCellClick}>\n        <span className={s.cellValue}> {getCellValueFromGameState(position)}</span>\n    </div>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"cell\":\"App_cell__2zBi9\",\"rightDiagonalCrossing\":\"App_rightDiagonalCrossing__8q4ak\",\"leftDiagonalCrossing\":\"App_leftDiagonalCrossing__31NYP\",\"horizontalCrossing\":\"App_horizontalCrossing__1c8kv\",\"verticalCrossing\":\"App_verticalCrossing__IZ-CV\",\"cellValue\":\"App_cellValue__3huY_\"};"],"sourceRoot":""}